#!/usr/bin/env bash
# git-backup
#
#	@originalAuthor		Kipras Melnikovas (kipras.org) <kipras@kipras.org>
#	@license			GPL-3.0
#
#	@usage
# 1) use this script directly or
# 2) set a git alias for it:
#
# ``` ~/.gitconfig:
# [alias]
#	backup = !git-backup
# ```
#
#	@description
# 'exec' is used for 'silent' mode
#
# 'silent' mode can be useful if you only want to get
# the generated branches' name
#

usage="\
Usage:
$ git-backup [OPTION]...

Options:
    -h    help

    -q    quite mode. Will only print the backup branches' name
"

printUsage() {
	printf "$usage\n"
}

# create function
git-backup() {
	exec 6>&1 # saves stdout

	# -q => quiet mode (return only generated branch name)
	while getopts ":hq" opt; do
		case "${opt}" in
			q)
				exec > /dev/null  # redirect stdout to /dev/null
				shift # forward argv by one option
				;;
			h)
				printUsage
				exit
				;;
			*)
				printf "invalid option $opt ($OPTARG)"
				exit
				;;
		esac
	done

	printf "==> git-backup:\n"

	git remote -v >/dev/null 2>&1 && shouldPushBranchToRemote="true" || shouldPushBranchToRemote="false"

	# get the name of the remote to which we'll push the backup branch
	remoteRepoName="$1"
	[ -z "$remoteRepoName" ] && remoteRepoName="origin"

	## get current branch
	#currentBranch="$(git rev-parse --abbrev-ref HEAD)" && \

	# get current username (if it's set), or get the first name of `user.name`
	currentUsername="$(git config user.username || git config user.name | cut -d ' ' -f 1)" && \

	git stash --include-untracked && \

	# --format: '%f' => "sanitized subject line, suitable for a filename" (GIT-LOG(1))
	# contains '<authorDate (UNIX timestamp)>--<stashCommitId>--WIP-on-<branchName>-<stashCommitHash>-<parentCommitTitle>'
	subjectLine="$(git stash list --format='%at--%h--%f' | head -n 1)" && \

	# generate backup branch name
	backupBranchName="$currentUsername-backup--$subjectLine" && \

	# create the backup branch
	git branch "$backupBranchName" && \

	# get your changes back
	git stash pop && \

	# push to remote repo
	if [ "$shouldPushBranchToRemote" = "true" ]; then
		printf "==> Pushing to remote repo ($remoteRepoName)\n" && \
		git push "$remoteRepoName" "$backupBranchName" >/dev/null 2>&1 || {
			printf " -> Failed 'git push'.\n"
			return 1
		}
	fi && \

	printf " -> Successfully backed up current changes\n" && \
	printf " -> Backup branch (use -q to print only it): \n" && \

	# restore stdout (does NOT print it though (good))
	exec 1>&6 6>&- && \

	{
		printf "$backupBranchName\n"
		return 0
	} || {
		printf " -> Something failed!\n" && \
		return 1
	}
};

# call the function
git-backup "$@" && exit 0 || exit 1

